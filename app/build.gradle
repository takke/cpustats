apply plugin: 'com.android.application'
apply plugin: 'kotlin-android'

// Module graph (Dependency Graph)
// ./gradlew generateDependencyGraph
apply plugin: "com.vanniktech.dependency.graph.generator"

android {
    //noinspection GroovyAssignabilityCheck
    signingConfigs {
        myConfig
    }

    namespace 'jp.takke.cpustats'

    compileSdk rootProject.ext.compileSdkVersion as Integer
    buildToolsVersion = rootProject.ext.buildToolsVersion as String

    defaultConfig {
        applicationId 'jp.takke.cpustats'
        targetSdkVersion rootProject.ext.targetSdkVersion as Integer
        minSdkVersion rootProject.ext.minSdkVersion as Integer
        versionCode rootProject.ext.versionCode as Integer
        versionName rootProject.ext.versionName as String

        // Rename APK/AAB filename
        def shortVersionName = versionName.replaceAll('\\.', '')
        //noinspection UnnecessaryQualifiedReference
        def d = new java.text.SimpleDateFormat("yyyyMMdd_HHmm").format(new Date())
        setProperty("archivesBaseName", "${apkNamePrefix}_${shortVersionName}_${d}")
    }

    buildTypes {
        release {
            minifyEnabled true
            shrinkResources false
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
            signingConfig signingConfigs.myConfig
        }
        debug {
            applicationIdSuffix '.debug'
            versionNameSuffix 'd'
        }
    }

    buildFeatures {
        buildConfig = true
        aidl true
    }

    flavorDimensions "edition"

    productFlavors {
        quad3 {
            dimension "edition"
        }
        quad5 {
            dimension "edition"
        }
    }

    // publish task
    def publish = project.tasks.create("publishAll")
    applicationVariants.all { variant ->

        if (variant.buildType.name == "release") {

            variant.outputs.each { output ->
                if (output.outputFileName.endsWith('.apk')) {

                    // publishXxxApk
                    def task = project.tasks.create("publish${variant.name.capitalize()}Apk", Copy)

                    def srcDir = variant.packageApplicationProvider.get().outputDirectory.getAsFile().get()
                    def srcPath = new File(srcDir, output.outputFileName)
                    task.from(srcPath)
                    task.into(deployTo)
                    task.dependsOn variant.assembleProvider.get()
                    publish.dependsOn task
                }
            }
        }
    }

    // bundlePublishXxxRelease task
    applicationVariants.all { variant ->

        if (variant.buildType.name == "release") {
            def flavorName0 = variant.productFlavors[0].name
            def buildTypeName = variant.buildType.name

            def task = project.tasks.create("bundlePublish${variant.name.capitalize()}", Copy)

            def path = "${buildDir}/outputs/bundle/${variant.name}/${archivesBaseName}-${flavorName0}-${buildTypeName}.aab"
//            System.println("*** aab path = $path ($task) [$flavorName0] [$buildTypeName]")

            task.from(path)
            task.into(deployTo)
            task.dependsOn "bundle${variant.name.capitalize()}"
        }
    }

    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }
}

dependencies {
    implementation fileTree(dir: 'libs', include: ['*.jar'])

    implementation libs.androidx.appcompat
    implementation libs.androidx.core.ktx
    implementation libs.androidx.annotation
    implementation libs.androidx.constraintlayout
    implementation libs.androidx.preference.ktx

    testImplementation libs.robolectric
    testImplementation libs.junit
    testImplementation libs.assertj.core

    implementation libs.kotlin.stdlib.jdk7
}

// load signing settings from gradle.properties
if (project.hasProperty('storeFile')) {
    android.signingConfigs.myConfig.storeFile = file(storeFile)
}
if (project.hasProperty('storePassword')) {
    android.signingConfigs.myConfig.storePassword = storePassword
}
if (project.hasProperty('keyAlias')) {
    android.signingConfigs.myConfig.keyAlias = keyAlias
}
if (project.hasProperty('keyPassword')) {
    android.signingConfigs.myConfig.keyPassword = keyPassword
}